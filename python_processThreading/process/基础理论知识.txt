同步:
    所谓同步,就是在发出一个功能调用时,在没有得到结果之前,该调用就不会返回,按照这个定义,其实绝大多数函数都是同步调用,
    但是一般而言,我们在说同步、异步的时候,特指那些需要其他部件协作或者需要一定时间完成的任务,

阻塞:
    阻塞调用是指调用结果返回之前,当前线程会被挂起(如遇到io操作),函数只有在得到结果之后才会将阻塞的线程激活,
    socket.client.send(json.dumps(" ").encode("utf8"))      #客户端发送了消息
    socket.sever.recv(1024)      #服务端等待接收

非阻塞:
    非阻塞和 阻塞的概念相对应,指在不能立刻得到结果之前也会立刻返回,同时该函数不会阻塞当前线程,

====================================================================================
串行:任务一个一个的去执行
并行:多个任务一起执行,但是一起执行的任务小于等于cpu核数
并发:一起执行的任务数大于cpu核数,通过调度任务的算法,实现多个任务一起执行(实际有些任务是没执行的)
1.线程是程序执行的最小单位,进程是操作系统分配资源的最小单位
2.进程之间相互独立,同一个进程下线程是共享的
3.线程上下文的切换比进程的上下文切换快
模式:
    单进程,单线程
    单进程,多线程
    多进程,多线程
    多进程,多协程

进程特点:独立的堆和栈,相互之间不共享,操作系统调用,切换时需要资源很大,效率低
线程特点:有自己独立的栈和共享的堆,共享堆,不共享栈,操作系统调度,切换时消耗一般,效率一般(不考虑全局锁下)
协程特点:有自己独立的栈和共享的堆,共享堆,不共享栈,协程由程序员在协程的代码里显示调度,切换时资源小,效率高
多进程,多线程执行时小于cpu核数时是并行,可以通过相互切换来实现并发,
协程在一个线程中所以是并发

开发选择技术时考虑点,切换效率,数据共享问题,数据安全,是否需要并发
=================================================================================
process启动方法分析
spawn:使用此方式启动的进程,只会执行和 target 参数或者 run() 方法相关的代码,Windows 平台只能使用此方法,
事实上该平台默认使用的也是该启动方式,相比其他两种方式,此方式启动进程的效率最低,
fork:使用此方式启动的进程,基本等同于主进程(即主进程拥有的资源,该子进程全都有),因此,该子进程会从创建位置起,
和主进程一样执行程序中的代码,注意,此启动方式仅适用于 UNIX 平台,os.fork() 创建的进程就是采用此方式启动的,
forserver:使用此方式,程序将会启动一个服务器进程,即当程序每次请求启动新进程时,父进程都会连接到该服务器进程,
请求由服务器进程来创建新进程,通过这种方式启动的进程不需要从父进程继承资源,注意,此启动方式只在 U